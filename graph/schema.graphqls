type Vachil {
  id: Int!
  CreatedAt: Time!
  UpdatedAt: Time!
  type: String!
  brand: String!
  regNo: String!
  name: String!
  capacity: Int!
  unitPrice: Float!
}

type User {
  id: Int!
  CreatedAt: Time!
  UpdatedAt: Time!
  firstName: String!
  lastName: String!
  email: String!
  mobile: String!
  password: String!
  isActive: Boolean!
  userType: String! # ADMIN  USER
  booking: [Booking!]!
}
type TotalPrice {
  id: Int!
  CreatedAt: Time!
  UpdatedAt: Time!
  serviceCharge: Float!
  unitPrice: Float!
  ttlDays: Int!
  price: Float!
}

scalar Time

type Booking {
  id: Int!
  CreatedAt: Time!
  UpdatedAt: Time!
  startDate: Time!
  endDate: Time!
  userID: Int!
  vachilID: Int!
  totalPriceID: Int!
}

type Query {
  vachil: [Vachil!]!
  vachilWithId(type: Int!): Vachil!
  vachilWithType(type: String!): [Vachil!]!
  vachilWithBrand(brand: String!): [Vachil!]!
  vachilWithRegNo(regNo: String!): Vachil!
  vachilWithName(name: String!): [Vachil!]!
  vachilWithTypeCapacity(type: String!, capacity: Int!): [Vachil!]!
  avelebleVachilWithType(
    type: String!
    startDate: Time!
    endDate: Time!
  ): [Vachil!]!
  avelableVachilWithTypeCapacity(
    type: String!
    capacity: Int!
    startDate: Time!
    endDate: Time!
  ): [Vachil!]!
  allBooking(startDate: Time!, endDate: Time!): [Booking!]!
  allBookingWithId(userID: Int!): [Booking!]!
  allActiveBookingWithId(userID: Int!): [Booking!]!
  userWithId(userID: Int!): User!
  userPasswordByName(email: String!): String!
}

input NewVachil {
  type: String!
  brand: String!
  name: String!
  regNo: String!
  capacity: Int!
  unitPrice: Float!
}

input NewBooking {
  startDate: Time!
  endDate: Time!
  userID: Int!
  vachilID: Int!
}

input RefreshTokenInput {
  token: String!
}

input NewUser {
  firstName: String!
  lastName: String!
  email: String!
  mobile: String!
  password: String!
}

input Login {
  username: String!
  password: String!
}

type Mutation {
  createVachil(input: NewVachil!): Vachil!
  updateVachil(vachilId: Int!, input: NewVachil!): Vachil!
  deleteVachil(vachilId: Int!): Boolean!
  createBooking(input: NewBooking!): Booking!
  updateBooking(bookingId: Int!, input: NewBooking!): Booking!
  deleteBooking(bookingId: Int!): Boolean!
}

#"Prevents access to a field if the user doesnt have the matching role"
directive @hasRole(role: Role!) on FIELD_DEFINITION
directive @user(id: ID!) on MUTATION | QUERY | FIELD

enum Role {
  ADMIN
  USER
}
